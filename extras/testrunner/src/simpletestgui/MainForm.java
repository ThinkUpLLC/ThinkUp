package simpletestgui;

import async.CommandRunner;
import async.RunCommand;
import io.ThinkUpTestsDirectory;
import io.SimpleTestFile;
import config.Config;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JButton;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * This is the main frame for the application. It contains all of the GUI elements and
 * event handlers.
 *
 * @author Sam Rose <samwho@lbak.co.uk>
 */
public class MainForm extends javax.swing.JFrame {

    public JButton getRunButton() {
        return runButton;
    }

    public JButton getCancelButton() {
        return cancelButton;
    }

    public JTextArea getTestOutput() {
        return testOutput;
    }

    public JProgressBar getProgressBar() {
        return progressBar;
    }
    private ThinkUpTestsDirectory testFiles = new ThinkUpTestsDirectory();
    private String baseThinkUpDir;
    private Thread runThread;
    private Config config = Config.getInstance();

    /** Creates new form MainForm */
    public MainForm() {
        try {
            // Set System L&F
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (UnsupportedLookAndFeelException e) {
            System.err.println("Look and feel not supported: " + e.getMessage());
        } catch (ClassNotFoundException e) {
            System.err.println("Class not found: " + e.getMessage());
        } catch (InstantiationException e) {
            System.err.println("Instantiation error: " + e.getMessage());
        } catch (IllegalAccessException e) {
            System.err.println("Illegal access exception: " + e.getMessage());
        }

        initComponents();

        this.setIconImage(Toolkit.getDefaultToolkit().getImage("src/assets/thinkup-logo.png"));

        // get the base ThinkUp dir from the config
        baseThinkUpDir = config.getValue("thinkup_root_dir");

        // parse relevant directories
        testFiles.parseDirectory(baseThinkUpDir + "tests");
        testFiles.parseDirectory(baseThinkUpDir + "webapp/plugins");

        // add the test files to the left list box
        testFileList.setListData(testFiles.getTestFiles().toArray());

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        testFileList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        methodList = new javax.swing.JList();
        runButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        testOutput = new javax.swing.JTextArea();
        cancelButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        debugMenu = new javax.swing.JMenu();
        debugCheckBox = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ThinkUp Test Runner");

        testFileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        testFileList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                testFileListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(testFileList);

        methodList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                methodListValueChanged(evt);
            }
        });
        methodList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                methodListKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(methodList);

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        testOutput.setColumns(20);
        testOutput.setEditable(false);
        testOutput.setLineWrap(true);
        testOutput.setRows(5);
        jScrollPane3.setViewportView(testOutput);

        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(runButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runButton)
                    .addComponent(cancelButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        debugMenu.setText("Debug");

        debugCheckBox.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        debugCheckBox.setText("Debug");
        debugMenu.add(debugCheckBox);

        jMenuBar1.add(debugMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void methodListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_methodListValueChanged
    }//GEN-LAST:event_methodListValueChanged

    private void testFileListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_testFileListValueChanged
        SimpleTestFile file = (SimpleTestFile) testFileList.getSelectedValue();

        methodList.setListData(file.getMethods().toArray());
    }//GEN-LAST:event_testFileListValueChanged

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        SimpleTestFile file = (SimpleTestFile) testFileList.getSelectedValue();
        ArrayList<String[]> env = new ArrayList<String[]>();

        // generate environment variables for each test
        Object[] objectArray = methodList.getSelectedValues();
        for (int i = 0; i < objectArray.length; i++) {
            String[] envA;
            if (!debugCheckBox.getState()) {
                envA = new String[2];
                envA[0] = "TEST_METHOD=" + (String) objectArray[i];
                envA[1] = "TEST_GUI=1";
            } else {
                envA = new String[3];
                envA[0] = "TEST_METHOD=" + (String) objectArray[i];
                envA[1] = "TEST_GUI=1";
                envA[2] = "TEST_DEBUG=1";
            }
            env.add(envA);
        }

        // truncate function if no methods are selected
        if (objectArray.length == 0) {
            testOutput.setText("No methods selected.");
            return;
        }

        // generate arrays of commands and environment variables ready to send to CommandRunner
        ArrayList<RunCommand> commands = new ArrayList<RunCommand>();
        Iterator<String[]> envIter = env.iterator();

        while (envIter.hasNext()) {
            commands.add(new RunCommand(this, "php " + file.getFile().getAbsolutePath(), envIter.next()));
        }

        // empty test output box ready for new tests
        testOutput.setText("");

        // create and run a thread running a CommandRunner
        runThread = new Thread(new CommandRunner(this, commands));
        runThread.start();

        this.cancelButton.setEnabled(true);
    }//GEN-LAST:event_runButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        if (runThread != null) {
            if (runThread.isAlive()) {
                CommandRunner.stop();
                this.cancelButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void methodListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_methodListKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.runButtonActionPerformed(null);
        }
    }//GEN-LAST:event_methodListKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBoxMenuItem debugCheckBox;
    private javax.swing.JMenu debugMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList methodList;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton runButton;
    private javax.swing.JList testFileList;
    private javax.swing.JTextArea testOutput;
    // End of variables declaration//GEN-END:variables
}
